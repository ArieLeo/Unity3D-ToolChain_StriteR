#pragma kernel Generate

#include "Assets/Shaders/Library/Common.hlsl"

float3 _PlaneNormal;
float3 _PlanePosition;

uint _SAMPLE_COUNT;
float4 _Result_TexelSize;
Texture2D<float4> _Input;
RWTexture2D<float4> _Result;

Texture2D<float> _CameraDepthTexture;
SamplerState sampler_PointClamp;

void ReflectionMapping(float2 uv)
{
    float depth = _CameraDepthTexture.SampleLevel(sampler_PointClamp, uv, 0);
    float3 positionWS=TransformNDCToWorld_VPMatrix(uv,depth);
    
    float normalProj = dot(positionWS.xyz - _PlanePosition, _PlaneNormal);
    float3 positionWSM = positionWS.xyz - normalProj * _PlaneNormal * 2;
    float4 positionCSM = TransformWorldToHClip(positionWSM);
    if (normalProj>0.05&& positionCSM.w > 0 && DepthLesser( depth,Z_END))
    {
        half2 uvM=0.h;
        half depthM = 0.h;
        TransformHClipToUVDepth(positionCSM,uvM,depthM);
        uint2 resultIDM = clamp(uvM* _Result_TexelSize.zw,0u,_Result_TexelSize.zw-1u);

// #if SHADER_API_D3D11
//          if (!DepthGreater(depthM, _Result[resultIDM].a))
//             _Result[resultIDM]= float4(_Input.SampleLevel(sampler_PointClamp, uv, 0).rgb,depthM);
// #endif
            _Result[resultIDM]= float4(_Input.SampleLevel(sampler_PointClamp, uv, 0).rgb,1);
    }
}
[numthreads(8, 8, 1)]
void Generate(uint2 id : SV_DispatchThreadID)
{
    float2 uv = id * _Result_TexelSize.xy;
    ReflectionMapping(uv);
    if (_SAMPLE_COUNT > 1u)
        ReflectionMapping(uv + _Result_TexelSize.xy * float2(0, .5));
    if (_SAMPLE_COUNT > 2u)
        ReflectionMapping(uv + _Result_TexelSize.xy * float2(.5, 0));
    if (_SAMPLE_COUNT > 3u)
        ReflectionMapping(uv + _Result_TexelSize.xy * float2(.5, .5));
}
