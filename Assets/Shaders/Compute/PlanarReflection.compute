#include "../CommonInclude.hlsl"
#pragma multi_compile _ _CLEAR_COLOR _CLEAR_CUBE

#pragma kernel Generate

Texture2D<float> _CameraDepthTexture;
float4 _CameraDepthTexture_TexelSize;
float3 _PlaneNormal;
float3 _PlanePosition;

float4x4 _MatrixVP;
float4x4 _MatrixInvVP;
Texture2D<float4> _Input;
RWTexture2D<float4> _Result;
float4 _Result_TexelSize;

SamplerState sampler_PointClamp;

[numthreads(8,8,8)]
void Generate (uint3 id : SV_DispatchThreadID)
{
    float2 uv = (id.xy + .5) * _Result_TexelSize.xy;
    float depth = _CameraDepthTexture.SampleLevel(sampler_PointClamp, uv, 0);

    float4 positionCS = float4(uv * 2 - 1, depth, 1);
    float4 positionWS = mul(_MatrixInvVP, positionCS);
    positionWS /= positionWS.w;
    float normalProj = dot(positionWS.xyz - _PlanePosition, _PlaneNormal);
    if(normalProj>0)
    {
        float3 positionWSM = positionWS.xyz - normalProj * _PlaneNormal * 2;
        float4 positionCSM = mul(_MatrixVP, float4(positionWSM, 1));
        float2 uvM = (positionCSM.xy / positionCSM.w + 1) * .5;
        uint2 resultIDM = uvM  * _Result_TexelSize.zw;
        float originDepth = _Result[resultIDM].a;
        if (depth>0&&originDepth <= positionCSM.z)
            _Result[resultIDM] = float4(_Input.SampleLevel(sampler_PointClamp, uv, 0).rgb, 1 - positionCSM.z);
    }
}